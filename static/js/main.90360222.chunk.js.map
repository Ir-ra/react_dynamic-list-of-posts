{"version":3,"sources":["components/PostsList.tsx","components/Loader/Loader.tsx","components/NewCommentForm.tsx","components/PostDetails.tsx","utils/fetchClient.ts","context/UsersContext.tsx","api/users.ts","components/SelectUser.tsx","components/UserSelector.tsx","api/comments.ts","App.tsx","api/posts.ts","index.tsx"],"names":["PostsList","posts","onSelectPost","selectedPost","className","map","post","id","title","type","classNames","onClick","Loader","NewCommentForm","selectedPostId","onAddNewComment","useState","name","setName","hasNameError","setHasNameError","email","setEmail","hasEmailError","setHasEmailError","body","setBody","hasBodyError","setHasBodyError","loading","setLoading","handleSubmit","event","a","preventDefault","trim","length","Error","onSubmit","htmlFor","placeholder","value","onChange","target","PostDetails","comments","isCommentError","writeComment","setWriteComment","onDeleteComment","href","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","JSON","stringify","headers","then","fetch","response","json","client","UsersContext","React","createContext","UsersProvider","children","users","setUsers","error","setError","useEffect","catch","Provider","SelectUser","handleClick","useContext","user","UserSelector","selectedUser","selectUser","open","setOpen","handleOpen","prev","role","addComment","postId","deleteComment","commentId","App","setSelectedUser","setPosts","setComments","setSelectedPost","isLoading","setIsLoading","isError","setIsError","setIsCommentError","finally","filteredPosts","useMemo","filter","userId","getUsersComments","getComments","handleAddNewComment","newComment","filteredComments","comment","handleDeleteComment","currPost","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.90360222.chunk.js","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  posts: Post[],\n  onSelectPost: (post: Post) => void;\n  selectedPost: Post | null,\n};\n\nexport const PostsList: React.FC<Props> = ({\n  posts,\n  onSelectPost,\n  selectedPost,\n}) => (\n  <div data-cy=\"PostsList\">\n    <p className=\"title\">Posts:</p>\n\n    <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n      <thead>\n        <tr className=\"has-background-link-light\">\n          <th>#</th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {posts.map(post => (\n          <tr data-cy=\"Post\" key={post.id}>\n            <td data-cy=\"PostId\">{post.id}</td>\n\n            <td data-cy=\"PostTitle\">\n              {post.title}\n            </td>\n\n            <td className=\"has-text-right is-vcentered\">\n              <button\n                type=\"button\"\n                data-cy=\"PostButton\"\n                className={classNames('button', 'is-link', {\n                  'is-light': selectedPost?.id !== post.id,\n                })}\n                onClick={() => onSelectPost(post)}\n              >\n                {selectedPost?.id === post.id ? 'Close' : 'Open'}\n              </button>\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  </div>\n);\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","/* eslint-disable react/button-has-type */\nimport classNames from 'classnames';\nimport React, { useState } from 'react';\n\ntype Props = {\n  selectedPostId: number,\n  onAddNewComment: (\n    postId: number,\n    name: string,\n    email: string,\n    body: string,\n  ) => void;\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  selectedPostId,\n  onAddNewComment,\n}) => {\n  const [name, setName] = useState('');\n  const [hasNameError, setHasNameError] = useState(false);\n\n  const [email, setEmail] = useState('');\n  const [hasEmailError, setHasEmailError] = useState(false);\n\n  const [body, setBody] = useState('');\n  const [hasBodyError, setHasBodyError] = useState(false);\n\n  const [loading, setLoading] = useState(false);\n\n  const handleNameChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setName(event.target.value);\n    setHasNameError(false);\n  };\n\n  const handleEmailChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setEmail(event.target.value);\n    setHasEmailError(false);\n  };\n\n  const handleBodyChange = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setBody(event.target.value);\n    setHasBodyError(false);\n  };\n\n  const handleSubmit = async (event: React.FormEvent) => {\n    event.preventDefault();\n\n    setHasNameError(!name.trim().length);\n    setHasEmailError(!email.trim().length);\n    setHasBodyError(!body.length);\n\n    if (name.trim().length\n      && email.trim().length\n      && body.trim().length\n    ) {\n      try {\n        setLoading(true);\n\n        await onAddNewComment(selectedPostId, name, email, body);\n        setBody('');\n      } catch {\n        throw new Error('Could not submit the form');\n      } finally {\n        setLoading(false);\n      }\n    }\n  };\n\n  const reset = () => {\n    setName('');\n    setHasNameError(false);\n    setEmail('');\n    setHasEmailError(false);\n    setBody('');\n    setHasBodyError(false);\n  };\n\n  return (\n    <form\n      data-cy=\"NewCommentForm\"\n      onSubmit={handleSubmit}\n    >\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classNames('input', { 'is-danger': hasNameError })}\n            value={name}\n            onChange={handleNameChange}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {hasNameError && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n\n        </div>\n\n        {hasNameError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"email\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classNames('input', { 'is-danger': hasEmailError })}\n            value={email}\n            onChange={handleEmailChange}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {hasEmailError && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n\n        </div>\n\n        {hasEmailError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={classNames('textarea',\n              { 'is-danger': hasBodyError })}\n            value={body}\n            onChange={handleBodyChange}\n          />\n        </div>\n\n        {hasBodyError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames('button is-link',\n              { 'is-loading': loading })}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={reset}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import React from 'react';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\nimport { Post } from '../types/Post';\nimport { Comment } from '../types/Comment';\n\ntype Props = {\n  selectedPost: Post;\n  comments: Comment[] | null;\n  isCommentError: boolean;\n  writeComment: boolean;\n  setWriteComment: React.Dispatch<React.SetStateAction<boolean>>;\n  onAddNewComment: (\n    postId: number,\n    name: string,\n    email: string,\n    body: string,\n  ) => void;\n  onDeleteComment: (commentId: number) => void;\n};\n\nexport const PostDetails: React.FC<Props> = ({\n  selectedPost,\n  comments,\n  isCommentError,\n  writeComment,\n  setWriteComment,\n  onAddNewComment,\n  onDeleteComment,\n}) => {\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${selectedPost?.id}: ${selectedPost?.title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {selectedPost?.body}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {!comments && !isCommentError && <Loader />}\n\n          {isCommentError && (\n            <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n              Something went wrong\n            </div>\n          )}\n\n          {!comments?.length && (\n            <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n              No comments yet\n            </p>\n          )}\n\n          {comments && (\n            <>\n              <p className=\"title is-4\">Comments:</p>\n              {comments.map(({\n                id,\n                name,\n                email,\n                body,\n              }) => (\n                <article\n                  className=\"message is-small\"\n                  data-cy=\"Comment\"\n                  key={id}\n                >\n                  <div className=\"message-header\">\n                    <a href={`mailto:${email}`} data-cy=\"CommentAuthor\">\n                      {name}\n                    </a>\n                    <button\n                      data-cy=\"CommentDelete\"\n                      type=\"button\"\n                      className=\"delete is-small\"\n                      aria-label=\"delete\"\n                      onClick={() => onDeleteComment(id)}\n                    >\n                      delete button\n                    </button>\n                  </div>\n\n                  <div className=\"message-body\" data-cy=\"CommentBody\">\n                    {body}\n                  </div>\n                </article>\n              ))}\n            </>\n          )}\n\n          {!writeComment && (\n            <button\n              data-cy=\"WriteCommentButton\"\n              type=\"button\"\n              className=\"button is-link\"\n              onClick={() => setWriteComment(true)}\n            >\n              Write a comment\n            </button>\n          )}\n        </div>\n\n        {writeComment && (\n          <NewCommentForm\n            selectedPostId={selectedPost.id}\n            onAddNewComment={onAddNewComment}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nconst BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import React, { useContext, useEffect, useState } from 'react';\nimport { User } from '../types/User';\nimport { getUsers } from '../api/users';\n\nexport const UsersContext = React.createContext([] as User[]);\n\ntype Props = {\n  children: React.ReactNode;\n};\n\nexport const UsersProvider: React.FC<Props> = ({ children }) => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [error, setError] = useState<string>('');\n\n  useEffect(() => {\n    getUsers()\n      .then(setUsers)\n      .catch(() => setError('Failed to fetch users.'));\n  }, []);\n\n  return (\n    <UsersContext.Provider value={users}>\n      {error ? <div>{error}</div> : children}\n    </UsersContext.Provider>\n  );\n};\n\nexport function useUsers() {\n  const users = useContext(UsersContext);\n\n  return users;\n}\n","import { User } from '../types/User';\nimport { client } from '../utils/fetchClient';\n\nexport function getUsers() {\n  return client.get<User[]>('/users')\n    .then(users => users);\n}\n","import { useUsers } from '../context/UsersContext';\nimport { User } from '../types/User';\n\ntype Props = {\n  handleClick: (user: User) => void,\n};\n\nexport const SelectUser: React.FC<Props> = ({ handleClick }) => {\n  const users = useUsers();\n\n  return (\n    <>\n      {users.map(user => (\n        <a\n          href={`#user-${user.id}`}\n          className=\"dropdown-item\"\n          key={user.id}\n          onClick={() => handleClick(user)}\n        >\n          {user.name}\n        </a>\n\n      ))}\n    </>\n  );\n};\n","import React, { useState } from 'react';\nimport { User } from '../types/User';\nimport { SelectUser } from './SelectUser';\n\ntype Props = {\n  selectedUser: User | null;\n  selectUser: (user: User) => void,\n};\n\nexport const UserSelector: React.FC<Props> = ({ selectedUser, selectUser }) => {\n  const [open, setOpen] = useState(false);\n\n  const handleOpen = () => {\n    setOpen((prev) => !prev);\n  };\n\n  const handleClick = (user: User) => {\n    selectUser(user);\n    handleOpen();\n  };\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className=\"dropdown is-active\"\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={handleOpen}\n        >\n          <span>\n            {selectedUser ? selectedUser.name : 'Choose a user'}\n          </span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n\n        <div className=\"dropdown-content\">\n          {open ? (\n            <SelectUser handleClick={handleClick} />\n          ) : (null)}\n        </div>\n\n      </div>\n    </div>\n  );\n};\n","import { Comment } from '../types/Comment';\nimport { client } from '../utils/fetchClient';\n\nexport const getComments = (postId: number) => {\n  return client.get<Comment[]>(`/comments?postId=${postId}`);\n};\n\nexport const addComment = (\n  postId: number,\n  name: string,\n  email: string,\n  body: string,\n) => {\n  return client.post<Comment>('/comments', {\n    postId,\n    name,\n    email,\n    body,\n  });\n};\n\nexport const deleteComment = (commentId: number) => {\n  return client.delete(`/comments/${commentId}`);\n};\n","import React, { useEffect, useMemo, useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\nimport { User } from './types/User';\nimport { Post } from './types/Post';\nimport { getUserPosts } from './api/posts';\nimport { addComment, deleteComment, getComments } from './api/comments';\nimport { Comment } from './types/Comment';\n\nexport const App: React.FC = () => {\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [selectedPost, setSelectedPost] = useState<Post | null>(null);\n\n  const [isLoading, setIsLoading] = useState(false);\n  const [isError, setIsError] = useState(false);\n  const [writeComment, setWriteComment] = useState(false);\n  const [isCommentError, setIsCommentError] = useState(false);\n\n  useEffect(() => {\n    setIsLoading(true);\n    getUserPosts()\n      .then(setPosts)\n      .catch(() => setIsError(true))\n      .finally(() => setIsLoading(false));\n  }, [selectedUser]);\n\n  const filteredPosts = useMemo(() => {\n    return posts.filter(post => selectedUser?.id === post.userId);\n  }, [posts]);\n  const selectUser = (user: User) => {\n    setSelectedUser(user);\n  };\n\n  const getUsersComments = (postId: number) => {\n    getComments(postId)\n      .then((data) => {\n        setComments(data);\n        setIsCommentError(false);\n      })\n      .catch(() => setIsCommentError(true))\n      .finally(() => setIsLoading(false));\n  };\n\n  const handleSelectPost = (post: Post) => {\n    setSelectedPost((currPost) => {\n      if (currPost?.id === post.id) {\n        return null;\n      }\n\n      return post;\n    });\n\n    getUsersComments(post.id);\n    setWriteComment(false);\n  };\n\n  const handleAddNewComment = async (\n    postId: number,\n    name: string,\n    email: string,\n    body: string,\n  ) => {\n    const newComment = await addComment(postId, name, email, body);\n\n    const filteredComments\n      = comments.filter(comment => selectedPost?.id === comment.postId);\n\n    setComments([...filteredComments, newComment]);\n  };\n\n  const handleDeleteComment = async (commentId: number) => {\n    const filteredComments\n      = comments.filter(comment => comment.id !== commentId);\n\n    setComments(filteredComments);\n    await deleteComment(commentId);\n  };\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  selectedUser={selectedUser}\n                  selectUser={selectUser}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!selectedUser && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                {isLoading && (<Loader />)}\n\n                {isError && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    Something went wrong!\n                  </div>\n                )}\n\n                {(selectedUser && !filteredPosts.length && !isLoading) && (\n                  <div className=\"notification is-warning\" data-cy=\"NoPostsYet\">\n                    No posts yet\n                  </div>\n                )}\n\n                {(selectedUser && !!filteredPosts.length && !isLoading) && (\n                  <PostsList\n                    posts={filteredPosts}\n                    selectedPost={selectedPost}\n                    onSelectPost={handleSelectPost}\n                  />\n                )}\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              { 'Sidebar--open': selectedPost },\n            )}\n          >\n            <div className=\"tile is-child box is-success \">\n              {selectedPost && (\n                <PostDetails\n                  selectedPost={selectedPost}\n                  comments={comments}\n                  isCommentError={isCommentError}\n                  writeComment={writeComment}\n                  setWriteComment={setWriteComment}\n                  onAddNewComment={handleAddNewComment}\n                  onDeleteComment={handleDeleteComment}\n                />\n              )}\n            </div>\n          </div>\n\n        </div>\n      </div>\n    </main>\n  );\n};\n","import { Post } from '../types/Post';\nimport { client } from '../utils/fetchClient';\n\nexport function getUserPosts() {\n  const url = '/posts';\n\n  return client.get<Post[]>(url);\n}\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\nimport { UsersProvider } from './context/UsersContext';\n\nReactDOM.render(\n  <UsersProvider>\n    <App />\n  </UsersProvider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}